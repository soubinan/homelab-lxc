metadata:
  name: Infisical
  get_version_command: date +%Y-%m
  description: Open Source all-in-one secret management platform to securely manage application configuration and secrets across your team and infrastructure.
  categories: Secrets management, Security
  project_source: https://github.com/Infisical/infisical
  distribution: debian
  release: bookworm
  architectures:
    - amd64
instructions:
  files:
    - path: /opt/infisical/settings.env
      generator: dump
      mode: "0440"
      content: |-
        PORT=8080
        HOST=0.0.0.0
        HTTPS_ENABLED=false 
        STANDALONE_BUILD=true 
        STANDALONE_MODE=true
        TELEMETRY_ENABLED=true
        NODE_ENV=production
        NEXT_PUBLIC_ENV=production
        NEXT_TELEMETRY_DISABLED=1
        POSTGRES_USER=infuser
        POSTGRES_DB=infisical

    - path: /etc/systemd/system/infisical-initdb.service
      generator: dump
      mode: "0440"
      content: |-
        [Unit]
        Description=DB initializer for Infisical in postgresql
        After=network.target postgresql.service
        Wants=postgresql.service
        ConditionPathExists=/backend/.installed__
        ConditionPathExists=!/var/lib/postgresql/.db_initialized__

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        WorkingDirectory=/
        User=postgres
        EnvironmentFile=/opt/infisical/settings.env
        ExecStart=/usr/bin/createdb ${POSTGRES_DB}
        ExecStart=/usr/bin/createuser -s ${POSTGRES_USER}
        ExecStart=/usr/bin/psql -c "GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO ${POSTGRES_USER};"
        ExecStart=/usr/bin/touch /var/lib/postgresql/.db_initialized__

        [Install]
        WantedBy=multi-user.target

    - path: /etc/systemd/system/infisical-migrator.service
      generator: dump
      mode: "0440"
      content: |-
        [Unit]
        Description=DB migrator for Infisical
        After=network.target infisical-initdb.service
        Wants=infisical-initdb.service
        ConditionPathExists=/var/lib/postgresql/.db_initialized__
        ConditionPathExists=!/backend/.migrated__

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        WorkingDirectory=/backend
        EnvironmentFile=/opt/infisical/settings.env
        Environment=DB_CONNECTION_URI=postgres://postgres@127.0.0.1:5432/infisical
        ExecStart=/usr/bin/npm run migration:latest
        ExecStart=/usr/bin/touch /backend/.migrated__

        [Install]
        WantedBy=multi-user.target

    - path: /etc/systemd/system/infisical.service
      generator: dump
      mode: "0440"
      content: |-
        [Unit]
        Description=Open Source Secret Management
        After=network.target infisical-migrator.service
        ConditionPathExists=/backend/.migrated__

        [Service]
        Type=simple
        WorkingDirectory=/backend
        EnvironmentFile=/opt/infisical/settings.env
        Environment=DB_CONNECTION_URI=postgres://infuser@127.0.0.1:5432/infisical
        Environment=REDIS_URL=redis://127.0.0.1:6379
        Environment=SITE_URL=http://0.0.0.0:8080
        PIDFile=/opt/infisical/infisical.pid
        ExecStart=/backend/standalone-entrypoint.sh
        Restart=always

        [Install]
        WantedBy=multi-user.target

  packages:
    - git
    - nodejs
    - redis
    - redis-server
    - postgresql-15

  repositories:
    - name: nodejs
      url: |-
        deb http://deb.nodesource.com/node_20.x nodistro main
      key: |-
        -----BEGIN PGP PUBLIC KEY BLOCK-----

        mQENBFdDN1ABCADaNd/I3j3tn40deQNgz7hB2NvT+syXe6k4ZmdiEcOfBvFrkS8B
        hNS67t93etHsxEy7E0qwsZH32bKazMqe9zDwoa3aVImryjh6SHC9lMtW27JPHFeM
        Srkt9YmH1WMwWcRO6eSY9B3PpazquhnvbammLuUojXRIxkDroy6Fw4UKmUNSRr32
        9Ej87jRoR1B2/57Kfp2Y4+vFGGzSvh3AFQpBHq51qsNHALU6+8PjLfIt+5TPvaWR
        TB+kAZnQZkaIQM2nr1n3oj6ak2RATY/+kjLizgFWzgEfbCrbsyq68UoY5FPBnu4Z
        E3iDZpaIqwKr0seUC7iA1xM5eHi5kty1oB7HABEBAAG0Ik5Tb2xpZCA8bnNvbGlk
        LWdwZ0Bub2Rlc291cmNlLmNvbT6JATgEEwECACIFAldDN1ACGwMGCwkIBwMCBhUI
        AgkKCwQWAgMBAh4BAheAAAoJEC9ZtfmbG+C0y7wH/i4xnab36dtrYW7RZwL8i6Sc
        NjMx4j9+U1kr/F6YtqWd+JwCbBdar5zRghxPcYEq/qf7MbgAYcs1eSOuTOb7n7+o
        xUwdH2iCtHhKh3Jr2mRw1ks7BbFZPB5KmkxHaEBfLT4d+I91ZuUdPXJ+0SXs9gzk
        Dbz65Uhoz3W03aiF8HeL5JNARZFMbHHNVL05U1sTGTCOtu+1c/33f3TulQ/XZ3Y4
        hwGCpLe0Tv7g7Lp3iLMZMWYPEa0a7S4u8he5IEJQLd8bE8jltcQvrdr3Fm8kI2Jg
        BJmUmX4PSfhuTCFaR/yeCt3UoW883bs9LfbTzIx9DJGpRIu8Y0IL3b4sj/GoZVq5
        AQ0EV0M3UAEIAKrTaC62ayzqOIPa7nS90BHHck4Z33a2tZF/uof38xNOiyWGhT8u
        JeFoTTHn5SQq5Ftyu4K3K2fbbpuu/APQF05AaljzVkDGNMW4pSkgOasdysj831cu
        ssrHX2RYS22wg80k6C/Hwmh5F45faEuNxsV+bPx7oPUrt5n6GMx84vEP3i1+FDBi
        0pt/B/QnDFBXki1BGvJ35f5NwDefK8VaInxXP3ZN/WIbtn5dqxppkV/YkO7GiJlp
        Jlju9rf3kKUIQzKQWxFsbCAPIHoWv7rH9RSxgDithXtG6Yg5R1aeBbJaPNXL9wpJ
        YBJbiMjkAFaz4B95FOqZm3r7oHugiCGsHX0AEQEAAYkBHwQYAQIACQUCV0M3UAIb
        DAAKCRAvWbX5mxvgtE/OB/0VN88DR3Y3fuqy7lq/dthkn7Dqm9YXdorZl3L152eE
        IF882aG8FE3qZdaLGjQO4oShAyNWmRfSGuoH0XERXAI9n0r8m4mDMxE6rtP7tHet
        y/5M8x3CTyuMgx5GLDaEUvBusnTD+/v/fBMwRK/cZ9du5PSG4R50rtst+oYyC2ao
        x4I2SgjtF/cY7bECsZDplzatN3gv34PkcdIg8SLHAVlL4N5tzumDeizRspcSyoy2
        K2+hwKU4C4+dekLLTg8rjnRROvplV2KtaEk6rxKtIRFDCoQng8wfJuIMrDNKvqZw
        FRGt7cbvW5MCnuH8MhItOl9Uxp1wHp6gtav/h8Gp6MBa
        =MARt
        -----END PGP PUBLIC KEY BLOCK-----

  actions:
    - trigger: post-files
      pongo: true
      action: |-
        #!/bin/bash
        set -eux

        export NODE_ENV=production
        export NEXT_PUBLIC_ENV=production
        export NEXT_PUBLIC_POSTHOG_HOST=https://app.posthog.com
        export NEXT_PUBLIC_POSTHOG_API_KEY=posthog-api-key
        export NEXT_PUBLIC_INTERCOM_ID=intercom-id
        export NEXT_PUBLIC_INFISICAL_PLATFORM_VERSION=v{{image.serial}}
        export NEXT_TELEMETRY_DISABLED=1

        npm config delete http-proxy
        npm config delete https-proxy

        npm config rm proxy
        npm config rm https-proxy

        set HTTP_PROXY=null
        set HTTPS_PROXY=null

        npm config set fetch-timeout 90000

        git clone https://github.com/Infisical/infisical --depth 1 /tmp/app

        mkdir /build-frontend && cd /build-frontend
        cp /tmp/app/frontend/{package.json,package-lock.json,next.config.js} .
        npm ci --only-production --ignore-scripts
        cp -r /tmp/app/frontend/* /build-frontend/
        npm run build
        mkdir -p /infisical-frontend/.next/cache/images
        cp -r /tmp/app/frontend/scripts /infisical-frontend/scripts
        cp -r /build-frontend/public /infisical-frontend/public
        cp -r /build-frontend/.next/standalone/* /infisical-frontend/
        cp -r /build-frontend/.next/* /infisical-frontend/.next/ && rm -rf /infisical-frontend/.next/standalone/
        npm cache clean --force

        export NODE_ENV=
        export NEXT_PUBLIC_ENV=

        mkdir /backend && cd /backend
        cp /tmp/app/backend/package*.json .
        npm ci --only-production
        cp -r /tmp/app/backend/* /backend/
        cp -r /tmp/app/standalone-entrypoint.sh /backend/ && chmod +x /backend/standalone-entrypoint.sh
        npm i -D tsconfig-paths
        npm run build
        cp -r /infisical-frontend /backend/frontend-build
        chmod +x -R /backend/scripts /backend/frontend-build/scripts
        npm cache clean --force

        rm -rf /build-frontend /infisical-frontend/
        touch .installed__
        cd /

        cat <<EOF >> /opt/infisical/settings.env
        ENCRYPTION_KEY=$(/usr/bin/openssl rand -hex 16)
        AUTH_SECRET=$(/usr/bin/openssl rand -hex 32)
        EOF

        PG_VERSION=$(ls -1 /etc/postgresql)

        cat <<EOF > /etc/postgresql/${PG_VERSION}/main/pg_hba.conf
        local   all             postgres                                         peer
        local   infisical       infuser                                          peer
        local   all             all                                              peer
        host    infisical       infuser,postgres         127.0.0.1/32            trust
        host    all             all                      127.0.0.1/32            scram-sha-256
        host    all             all                      ::1/128                 scram-sha-256
        local   replication     all                                              peer
        host    replication     all                      127.0.0.1/32            scram-sha-256
        host    replication     all                      ::1/128                 scram-sha-256
        EOF

        systemctl enable redis-server.service postgresql.service infisical-migrator.service infisical.service

name: LXC Image Builder

on:
  workflow_call:
    inputs:
      config_path:
        required: true
        type: string
      app_name:
        required: true
        type: string
      app_version:
        required: true
        type: string
      app_ports:
        required: true
        type: string
      description:
        required: true
        type: string
      categories:
        required: true
        type: string
      project_source:
        required: true
        type: string
      distribution:
        required: true
        type: string
      architecture:
        required: true
        type: string
      release:
        required: true
        type: string
      branch_name:
        required: true
        type: string
      is_merged:
        required: true
        type: boolean
    secrets:
      HOMELAB_LXC_EP:
        required: true
      HOMELAB_LXC_TOKEN:
        required: true
      RCLONE_CONFIG:
        required: true
      RCLONE_CONFIG_PASS:
        required: true

jobs:
  image-build:
    runs-on: ubuntu-latest
    steps:
      - name: Check submitted version
        id: version-check
        run: |
          SUBMITTED_BUILD_ID=${{inputs.app_name}}-${{inputs.app_version}}-${{inputs.architecture}}
          CHECKED_BUILD_ID=$(curl -sLX POST $HOMELAB_LXC_EP -H "Content-Type: application/json" -d '{"query":"query MyQuery { build(where: {buildId: \"${{inputs.app_name}}-${{inputs.app_version}}-${{inputs.architecture}}\"}) { buildId } }"}'| jq -r '.data.build.buildId')
          echo "SUBMITTED_BUILD_ID=$SUBMITTED_BUILD_ID" >> $GITHUB_OUTPUT
          echo "CHECKED_BUILD_ID=$CHECKED_BUILD_ID" >> $GITHUB_OUTPUT
        env:
          HOMELAB_LXC_EP: ${{secrets.HOMELAB_LXC_EP}}

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install required tools
        if: github.event_name != 'schedule' || (steps.version-check.outputs.SUBMITTED_BUILD_ID != steps.version-check.outputs.CHECKED_BUILD_ID && github.event_name == 'schedule')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y debootstrap squashfs-tools jq wget curl unzip
          sudo snap install distrobuilder --classic
          mkdir -p /tmp/output/${{inputs.app_name}}
          mkdir -p /tmp/cache/${{inputs.app_name}}
          wget $(curl -s https://api.github.com/repos/Orange-OpenSource/hurl/releases/latest |jq -r '.assets[] | select(.name|test("amd64.deb")) | .browser_download_url') -O /tmp/hurl_amd64.deb
          sudo apt-get install -y /tmp/hurl_amd64.deb
          sudo -v ; curl https://rclone.org/install.sh | sudo bash

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip' # caching pip dependencies
      - run: |
          pip install jinja2-cli
          jinja2 ${{github.workspace}}/${{inputs.config_path}} -D APP_NAME="${{ inputs.app_name }}" -D EXPOSED_PORTS="${{ inputs.app_ports }}" > ${{github.workspace}}/lxc-template.yml

      - name: Build Image
        if: github.event_name != 'schedule' || (steps.version-check.outputs.SUBMITTED_BUILD_ID != steps.version-check.outputs.CHECKED_BUILD_ID && github.event_name == 'schedule')
        run: |
          sudo distrobuilder --cache-dir /tmp/cache/${{inputs.app_name}} build-lxc ${{github.workspace}}/lxc-template.yml -o image.distribution=${{inputs.distribution}} -o image.architecture=${{inputs.architecture}} -o image.release=${{inputs.release}} -o image.serial="${{inputs.app_version}}" -o source.url="http://ftp.us.debian.org/debian" /tmp/output/${{inputs.app_name}}/
          mv /tmp/output/${{inputs.app_name}}/rootfs.tar.xz ./${{inputs.app_name}}-${{inputs.app_version}}-${{inputs.architecture}}-root.tar.xz
          mv /tmp/output/${{inputs.app_name}}/meta.tar.xz ./${{inputs.app_name}}-${{inputs.app_version}}-${{inputs.architecture}}-meta.tar.xz
          echo "ARTIFACT_SIZE=$(du -sh ./${{inputs.app_name}}-${{inputs.app_version}}-${{inputs.architecture}}-root.tar.xz| cut -f 1)" >> $GITHUB_ENV
          pwd && ls -lash

      - name: Publish Image files
        if: inputs.branch_name == 'test' || (steps.version-check.outputs.SUBMITTED_BUILD_ID != steps.version-check.outputs.CHECKED_BUILD_ID && github.event_name == 'schedule') || (inputs.branch_name == 'main' && inputs.is_merged == true)
        run: |
          cat << EOF > /tmp/rclone.conf
          $RCLONE_CONFIG
          EOF
          echo
          rclone copy ./${{inputs.app_name}}-${{inputs.app_version}}-${{inputs.architecture}}-root.tar.xz cloudflare:lxc-images --config /tmp/rclone.conf
          rclone copy ./${{inputs.app_name}}-${{inputs.app_version}}-${{inputs.architecture}}-meta.tar.xz cloudflare:lxc-images --config /tmp/rclone.conf
          echo
          echo 'LXC Image published successfully !'
        env:
          RCLONE_CONFIG: ${{secrets.RCLONE_CONFIG}}
          RCLONE_CONFIG_PASS: ${{secrets.RCLONE_CONFIG_PASS}}

      - name: Publish Image metadata
        if: inputs.branch_name == 'test' || (steps.version-check.outputs.SUBMITTED_BUILD_ID != steps.version-check.outputs.CHECKED_BUILD_ID && github.event_name == 'schedule') || (inputs.branch_name == 'main' && inputs.is_merged == true)
        run: |
          CATEGORIES_STR="${{inputs.categories}}"
          CATEGORIES_FMT=$(echo "[\"$CATEGORIES_STR\"]" | sed -E 's/^\["[ ,]+/["/g' | sed -E 's/[ ,]+"]$/"]/g'| sed -E 's/ *, */","/g')

          hurl -v --variable endpoint_url=$HOMELAB_LXC_EP --variable token=$HOMELAB_LXC_TOKEN \
            --variable app_name=${{inputs.app_name}} --variable app_version=${{inputs.app_version}} \
            --variable arch=${{inputs.architecture}} --variable dist=${{inputs.distribution}} \
            --variable dist_release=${{inputs.release}} --variable build_id=${{inputs.app_name}}-${{inputs.app_version}}-${{inputs.architecture}} \
            --variable size=$ARTIFACT_SIZE --variable source=${{inputs.project_source}} --variable is_for_test=${{inputs.branch_name == 'test'}} \
            --variable categories="$CATEGORIES_FMT" --variable description="${{inputs.description}}" \
            .github/publish_build.hurl
          echo
          echo 'LXC build details published successfully !'
        env:
          HOMELAB_LXC_EP: ${{secrets.HOMELAB_LXC_EP}}
          HOMELAB_LXC_TOKEN: ${{secrets.HOMELAB_LXC_TOKEN}}
